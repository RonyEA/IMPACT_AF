// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simcpp
void simcpp(DataFrame dt, const List l, const int mc);
RcppExport SEXP _IMPACTaf_simcpp(SEXP dtSEXP, SEXP lSEXP, SEXP mcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const List >::type l(lSEXP);
    Rcpp::traits::input_parameter< const int >::type mc(mcSEXP);
    simcpp(dt, l, mc);
    return R_NilValue;
END_RCPP
}
// carry_forward
IntegerVector carry_forward(IntegerVector& x, const LogicalVector& pid_mrk, const int& y, const bool& byref);
RcppExport SEXP _IMPACTaf_carry_forward(SEXP xSEXP, SEXP pid_mrkSEXP, SEXP ySEXP, SEXP byrefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    Rcpp::traits::input_parameter< const int& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool& >::type byref(byrefSEXP);
    rcpp_result_gen = Rcpp::wrap(carry_forward(x, pid_mrk, y, byref));
    return rcpp_result_gen;
END_RCPP
}
// carry_forward_incr
IntegerVector carry_forward_incr(IntegerVector& x, const LogicalVector& pid_mrk, const bool& recur, const int& y, const bool& byref);
RcppExport SEXP _IMPACTaf_carry_forward_incr(SEXP xSEXP, SEXP pid_mrkSEXP, SEXP recurSEXP, SEXP ySEXP, SEXP byrefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    Rcpp::traits::input_parameter< const bool& >::type recur(recurSEXP);
    Rcpp::traits::input_parameter< const int& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool& >::type byref(byrefSEXP);
    rcpp_result_gen = Rcpp::wrap(carry_forward_incr(x, pid_mrk, recur, y, byref));
    return rcpp_result_gen;
END_RCPP
}
// carry_backward
IntegerVector carry_backward(const IntegerVector& x, const LogicalVector& pid_mrk, const int& y);
RcppExport SEXP _IMPACTaf_carry_backward(SEXP xSEXP, SEXP pid_mrkSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    Rcpp::traits::input_parameter< const int& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(carry_backward(x, pid_mrk, y));
    return rcpp_result_gen;
END_RCPP
}
// carry_backward_decr
IntegerVector carry_backward_decr(const IntegerVector& x, const LogicalVector& pid_mrk);
RcppExport SEXP _IMPACTaf_carry_backward_decr(SEXP xSEXP, SEXP pid_mrkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    rcpp_result_gen = Rcpp::wrap(carry_backward_decr(x, pid_mrk));
    return rcpp_result_gen;
END_RCPP
}
// mk_new_simulant_markers
LogicalVector mk_new_simulant_markers(const IntegerVector& pid);
RcppExport SEXP _IMPACTaf_mk_new_simulant_markers(SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(mk_new_simulant_markers(pid));
    return rcpp_result_gen;
END_RCPP
}
// identify_longdead
LogicalVector identify_longdead(const IntegerVector& x, const LogicalVector& pid);
RcppExport SEXP _IMPACTaf_identify_longdead(SEXP xSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_longdead(x, pid));
    return rcpp_result_gen;
END_RCPP
}
// identify_invitees
IntegerVector identify_invitees(const IntegerVector& elig, const IntegerVector& prev_inv, const NumericVector& prb, const IntegerVector& freq, const LogicalVector& pid);
RcppExport SEXP _IMPACTaf_identify_invitees(SEXP eligSEXP, SEXP prev_invSEXP, SEXP prbSEXP, SEXP freqSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type elig(eligSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type prev_inv(prev_invSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prb(prbSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_invitees(elig, prev_inv, prb, freq, pid));
    return rcpp_result_gen;
END_RCPP
}
// hc_effect
IntegerVector hc_effect(const IntegerVector& x, const double& prb_of_continuation, const LogicalVector& pid);
RcppExport SEXP _IMPACTaf_hc_effect(SEXP xSEXP, SEXP prb_of_continuationSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type prb_of_continuation(prb_of_continuationSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(hc_effect(x, prb_of_continuation, pid));
    return rcpp_result_gen;
END_RCPP
}
// fbound
NumericVector fbound(const NumericVector& x, NumericVector& a, NumericVector& b);
RcppExport SEXP _IMPACTaf_fbound(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fbound(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// antilogit
double antilogit(const double& x);
RcppExport SEXP _IMPACTaf_antilogit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(antilogit(x));
    return rcpp_result_gen;
END_RCPP
}
// dtsubset
SEXP dtsubset(SEXP x, SEXP rows, SEXP cols);
RcppExport SEXP _IMPACTaf_dtsubset(SEXP xSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(dtsubset(x, rows, cols));
    return rcpp_result_gen;
END_RCPP
}
// fscramble_trajectories
NumericVector fscramble_trajectories(NumericVector& x, const LogicalVector& pid, const double& jumpiness, const bool& inplace);
RcppExport SEXP _IMPACTaf_fscramble_trajectories(SEXP xSEXP, SEXP pidSEXP, SEXP jumpinessSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpiness(jumpinessSEXP);
    Rcpp::traits::input_parameter< const bool& >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fscramble_trajectories(x, pid, jumpiness, inplace));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidNum
NumericVector shift_bypidNum(const NumericVector& x, const int& lag, const double& replace, const IntegerVector& id);
RcppExport SEXP _IMPACTaf_shift_bypidNum(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const double& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidNum(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidInt
IntegerVector shift_bypidInt(const IntegerVector& x, const int& lag, const int& replace, const IntegerVector& id);
RcppExport SEXP _IMPACTaf_shift_bypidInt(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const int& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidInt(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidBool
IntegerVector shift_bypidBool(const LogicalVector& x, const int& lag, const bool& replace, const IntegerVector& id);
RcppExport SEXP _IMPACTaf_shift_bypidBool(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const bool& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidBool(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidStr
StringVector shift_bypidStr(const CharacterVector& x, const int& lag, const std::string& replace, const IntegerVector& id);
RcppExport SEXP _IMPACTaf_shift_bypidStr(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidStr(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IMPACTaf_simcpp", (DL_FUNC) &_IMPACTaf_simcpp, 3},
    {"_IMPACTaf_carry_forward", (DL_FUNC) &_IMPACTaf_carry_forward, 4},
    {"_IMPACTaf_carry_forward_incr", (DL_FUNC) &_IMPACTaf_carry_forward_incr, 5},
    {"_IMPACTaf_carry_backward", (DL_FUNC) &_IMPACTaf_carry_backward, 3},
    {"_IMPACTaf_carry_backward_decr", (DL_FUNC) &_IMPACTaf_carry_backward_decr, 2},
    {"_IMPACTaf_mk_new_simulant_markers", (DL_FUNC) &_IMPACTaf_mk_new_simulant_markers, 1},
    {"_IMPACTaf_identify_longdead", (DL_FUNC) &_IMPACTaf_identify_longdead, 2},
    {"_IMPACTaf_identify_invitees", (DL_FUNC) &_IMPACTaf_identify_invitees, 5},
    {"_IMPACTaf_hc_effect", (DL_FUNC) &_IMPACTaf_hc_effect, 3},
    {"_IMPACTaf_fbound", (DL_FUNC) &_IMPACTaf_fbound, 3},
    {"_IMPACTaf_antilogit", (DL_FUNC) &_IMPACTaf_antilogit, 1},
    {"_IMPACTaf_dtsubset", (DL_FUNC) &_IMPACTaf_dtsubset, 3},
    {"_IMPACTaf_fscramble_trajectories", (DL_FUNC) &_IMPACTaf_fscramble_trajectories, 4},
    {"_IMPACTaf_shift_bypidNum", (DL_FUNC) &_IMPACTaf_shift_bypidNum, 4},
    {"_IMPACTaf_shift_bypidInt", (DL_FUNC) &_IMPACTaf_shift_bypidInt, 4},
    {"_IMPACTaf_shift_bypidBool", (DL_FUNC) &_IMPACTaf_shift_bypidBool, 4},
    {"_IMPACTaf_shift_bypidStr", (DL_FUNC) &_IMPACTaf_shift_bypidStr, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_IMPACTaf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
